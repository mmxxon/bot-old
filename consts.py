from telebot.types import InlineKeyboardButton as But
from telebot.types import InlineKeyboardMarkup as Mark


def _callback(*args):
    return "$".join([str(i) for i in args])


txtstart = (
    "<b>–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞</b>\n"
    + "–í—Å–µ –∫—Ä—É–ø–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å—Å—è"
    + " –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏ (–Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)."
    + "–ö–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ç–∞–∫ –∂–µ"
    + " –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è(–Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)"
    + "\n\n<b>–ë–æ—Ç –º–æ–∂–µ—Ç</b>:\n"
    + "- –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–ø—É–∂–∫—É: /papuga\n"
    + "- –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –≤ —Å–∞–ø—ë—Ä /minesweeper\n"
    + "- –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–∞–ø–µ—Ä–∞ /stats\n"
    + "- (–ù–æ–≤–æ–µ —Å–∫–æ—Ä–æ)"
)

ticrules = (
    "* –ü—Ä–∞–≤–∏–ª–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –≤–µ—Ä—Å–∏–∏ –∫—Ä–µ—Å—Ç–∏–∫–æ–≤ -–Ω–æ–ª–∏–∫–æ–≤*\n"
    + "1)–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —é–∑–µ—Ä–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞,"
    + " –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∏–≥—Ä—É "
    + "—Ç–∞–∫: \n`/tic @username` –∏–ª–∏ `/tic username`.\n"
    + "–ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "
    + "(—á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –µ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å)\n"
    + "2)–ü—Ä–æ—Å—Ç–∏–≤–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –ª–∏—á–∫–µ –±–æ—Ç–∞\n"
    + "3)–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–ª—É—á–∞–π–Ω—ã–π –∏–≥—Ä–æ–∫ —Å—Ç–∞–Ω–µ—Ç –ø–µ—Ä–≤—ã–º (–∫—Ä–µ—Å—Ç–∏–∫–æ–º)\n"
    + "4)–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞:\n"
    + "- 1.–ù–µ –æ—Å—Ç–∞–µ—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫\n"
    + "- 2.–û–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ —Å–æ–±–∏—Ä–∞–µ—Ç —Ç—Ä–∏ –∑–Ω–∞–∫–∞ –≤ —Ä—è–¥\n"
    + "- 3.–û–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –æ—Ç–º–µ–Ω–∏—Ç –∏–≥—Ä—É (—Å–¥–∞—Å—Ç—Å—è)\n\n"
    + "–ö—Å—Ç–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∞ `/tic` –Ω–∏–∫–∞–∫ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –æ–¥–Ω–æ–∏–º–µ–Ω–Ω—ã–º"
    + " –ø—Ä–µ–¥–º–µ—Ç–æ–º. –≠—Ç–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ—Ç "
    + "[Tic-tac-toe](https://en.wikipedia.org/wiki/Tic-tac-toe)"
)


def html_message(
    datetime, textm, name, lname, username, id, text, data,
):
    return f"""
<b>NEW {textm}</b>
<b>TIME</b>: <code>{datetime}</code>
<b>USER</b>
- First: |<code>{name}</code>|
- Last:  |<code>{lname}</code>|
- Username: @{username}
- ID: <code>{id}</code>
MESSAGE TEXT: |<code>{text}</code>|
<b>CALL DATA</b>: |<code>{data}</code>|"""


def stattxt(name, won, lost, points):
    all = won + lost
    if won != 0 and lost != 0:
        percent = int((float(won) / float(all)) * 100)
        middle = float(points) / float(all)
    elif won == 0:
        percent = 0
        middle = 0
    elif lost == 0:
        middle = float(points) / float(all)
        percent = 100
    middle = round(middle, 1)
    if 100 >= percent >= 80 and middle >= 5.6:
        txt = "–ó–µ –±–µ—Å—Çüëë"
    elif 80 > percent >= 60 and middle >= 3.6:
        txt = "–ú–æ—â–Ω–æüí™"
    elif 60 > percent >= 40 and middle >= 2:
        txt = "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Çüëç"
    else:
        txt = "–ú–æ–∂–µ—à—å –ª—É—á—à–µüîù"
    return (
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {name}</b>"
        + f"\n<b>–í—Å–µ–≥–æ –∏–≥—Ä</b>: {all}"
        + f"\n<b>–ü–æ–±–µ–¥</b>: {won}"
        + f"\n<b>–ü–æ—Ä–∞–∂–µ–Ω–∏–π</b>: {lost}"
        + f"\n<b>–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ</b>: {percent}%"
        + f"\n<b>–û—á–∫–æ–≤</b>: {points}"
        + f"\n<b>–í —Å—Ä–µ–¥–Ω–µ–º –æ—á–∫–æ–≤ –∑–∞ –∏–≥—Ä—É</b>: {middle}"
        + f"\n\n{txt}"
    )


# buttons
class MARKUP:
    START = Mark().row(But("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", None, _callback("subscribe", "plus")))
    START2 = Mark().row(But("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", None, _callback("subscribe", "minus")))
    MINE = (
        Mark()
        .row(But("5", None, _callback("size", 5)), But("6", None, _callback("size", 6)))
        .row(But("7", None, _callback("size", 7)), But("8", None, _callback("size", 8)),)
    )
    NEWGAME_B = But("–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É", None, _callback("foundgame", "new"))
    UNFINISHED = Mark().row(
        But("–î–æ–∏–≥—Ä–∞—Ç—å –ø—Ä–æ—à–ª—É—é –∏–≥—Ä—É", None, _callback("foundgame", "prev")), NEWGAME_B
    )

    def GAME(game, text, data=None):
        return But(text, None, _callback(game, data))

    MODE1 = But("–†–µ–∂–∏–º –∏–≥—Ä—ãüí£", None, _callback("mark", "plus"))
    MODE2 = But("–†–µ–∂–∏–º —Ñ–ª–∞–∂–∫–æ–≤üö©", None, _callback("mark", "minus"))
    CLEAR_MINE_STAT = But("–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", None, _callback("clearmine", "first"))
    CLEAR_MINE_STAT_2 = Mark().row(
        But("–î–∞", None, _callback("clearmine", "second")),
        But("–ù–µ—Ç", None, _callback("clearmine", "clret")),
    )
    SEND_TIC_INVITE = Mark().row(
        But("–î–∞", None, _callback("ticinvite", "yes")),
        But("–ù–µ—Ç", None, _callback("ticinvite", "no")),
    )
    ACCEPT_TIC_INVITE = Mark().row(
        But("–ü—Ä–∏–Ω—è—Ç—å", None, _callback("ticinvite", "accept")),
        But("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", None, _callback("ticinvite", "decline")),
    )

    def SURRENDER(val):
        keyboard = Mark().row(But("–°–¥–∞—Ç—å—Å—è", None, _callback("ticsurrender", val)))
        return keyboard

    def KEYFIRST(field):
        size = 3
        keyboard = Mark(size)
        for i in range(size):
            rows = []
            for j in range(size):
                cell = field[size * i + j]
                if cell["val"] == 0:
                    text = "‚ùå"
                    type = "OK"
                    data = type
                elif cell["val"] == 1:
                    text = "‚≠ïÔ∏è"
                    type = "OK"
                    data = type
                elif cell["val"] is None:
                    text = "‚ö´Ô∏è"
                    type = "ticlick"
                    data = _callback(i, j)
                rows.append(MARKUP.GAME(type, text, data))
            keyboard.row(*rows)
        return keyboard

    def KEYSECOND(field):
        keyboard = Mark()
        for i in range(3):
            rows = []
            for j in range(3):
                cell = field[3 * i + j]
                if cell["val"] == 0:
                    text = "‚ùå"
                elif cell["val"] == 1:
                    text = "‚≠ïÔ∏è"
                elif cell["val"] is None:
                    text = "‚ö´Ô∏è"
                type = "OK"
                data = type
                rows.append(MARKUP.GAME(type, text, data))
            keyboard.row(*rows)
        return keyboard
