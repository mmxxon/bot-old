from telebot.types import InlineKeyboardButton as But
from telebot.types import InlineKeyboardMarkup as Mark


def _callback(*args):
    return "$".join([str(i) for i in args])


def html_message(
    datetime, textm, ctype, cid, cusername, name, lname, username, id, text, data,
):
    return f"""
<b>NEW {textm}</b>
<b>TIME</b>: <code>{datetime}</code>
<b>CHAT</b>
- TYPE: <code>{ctype}</code>
- ID: <code>{str(cid)}</code>
- NAME: @{str(cusername)}
<b>USER</b>
- First: |<code>{name}</code>|
- Last:  |<code>{lname}</code>|
- Username: @{str(username)}
- ID: <code>{str(id)}</code>
MESSAGE TEXT: |<code>{text}</code>|
<b>CALL DATA</b>: |<code>{data}</code>|"""


def stattxt(name, won, lost, points):
    all = won + lost
    if won != 0 and lost != 0:
        percent = int((float(won) / float(all)) * 100)
        middle = float(points) / float(all)
    elif won == 0:
        percent = 0
        middle = 0
    elif lost == 0:
        middle = float(points) / float(all)
        percent = 100
    middle = round(middle, 1)
    if 100 >= percent >= 80 and middle >= 5.6:
        txt = "–ó–µ –±–µ—Å—Çüëë"
    elif 80 > percent >= 60 and middle >= 3.6:
        txt = "–ú–æ—â–Ω–æüí™"
    elif 60 > percent >= 40 and middle >= 2:
        txt = "–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Çüëç"
    else:
        txt = "–ú–æ–∂–µ—à—å –ª—É—á—à–µüîù"
    return (
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {name}</b>"
        + f"\n<b>–í—Å–µ–≥–æ –∏–≥—Ä</b>: {all}"
        + f"\n<b>–ü–æ–±–µ–¥</b>: {won}"
        + f"\n<b>–ü–æ—Ä–∞–∂–µ–Ω–∏–π</b>: {lost}"
        + f"\n<b>–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ</b>: {percent}%"
        + f"\n<b>–û—á–∫–æ–≤</b>: {points}"
        + f"\n<b>–í —Å—Ä–µ–¥–Ω–µ–º –æ—á–∫–æ–≤ –∑–∞ –∏–≥—Ä—É</b>: {middle}"
        + f"\n\n{txt}"
    )


# buttons
class MARKUP:
    START = Mark().row(But("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", None, _callback("subscribe", "plus")))
    START2 = Mark().row(But("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", None, _callback("subscribe", "minus")))
    MINE = (
        Mark()
        .row(But("5", None, _callback("size", 5)), But("6", None, _callback("size", 6)))
        .row(But("7", None, _callback("size", 7)), But("8", None, _callback("size", 8)),)
    )
    NEWGAME_B = But("–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É", None, _callback("foundgame", "new"))
    UNFINISHED = Mark().row(
        But("–î–æ–∏–≥—Ä–∞—Ç—å –ø—Ä–æ—à–ª—É—é –∏–≥—Ä—É", None, _callback("foundgame", "prev")), NEWGAME_B
    )

    def GAME(game, text, data=None):
        return But(text, None, _callback(game, data))

    MODE1 = But("–†–µ–∂–∏–º –∏–≥—Ä—ãüí£", None, _callback("mark", "plus"))
    MODE2 = But("–†–µ–∂–∏–º —Ñ–ª–∞–∂–∫–æ–≤üö©", None, _callback("mark", "minus"))
    CLEAR_MINE_STAT = But("–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", None, _callback("clearmine", "first"))
    CLEAR_MINE_STAT_2 = Mark().row(
        But("–î–∞", None, _callback("clearmine", "second")),
        But("–ù–µ—Ç", None, _callback("clearmine", "clret")),
    )
